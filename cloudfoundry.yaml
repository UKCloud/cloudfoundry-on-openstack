heat_template_version: 2015-04-30

parameters:
  flavor:
    type: string
    description: Flavor for the server to be created
    default: t1.small
    constraints:
      - custom_constraint: nova.flavor
  image:
    type: string
    description: Image ID or image name to use for the server
    default: "Ubuntu 16.04 amd64"
    constraints:
      - custom_constraint: glance.image

  dns_host1:
    type: string
    description: Primary DNS Server 
    default: "8.8.8.8"

  dns_host2:
    type: string
    description: Secondary DNS Server
    default: "8.8.4.4"

  network_prefix:
    type: string
    description: A CIDR /16 address space used to deploy Cloud Foundry
    default: "192.168"

  traveling_bosh_admin_version:
    type: string
    description: Tagged version of traveling-bosh from https://github.com/cloudfoundry-community/traveling-bosh
    default: v1.2809.0

  traveling_cf_admin_version:
    type: string
    description: Tagged version of traveling-cf-admin from https://github.com/cloudfoundry-community/traveling-cf-admin
    default: v6.17.0

  openstack_user:
    type: string
    description: Openstack Login Username

  openstack_password:
    type: string
    description: Openstack Login Password

  openstack_project:
    type: string
    description: Openstack Project

  openstack_auth_url:
    type: string
    description: Openstack Keystone Auth URL




resources:
  internal_net:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: internal-net

  internal_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: internal_net }
      cidr: 
        list_join: ['.', [ {get_param: network_prefix}, '2.0/24']] 
      dns_nameservers: [ {get_param: dns_host1}, {get_param: dns_host2} ]
      ip_version: 4
      name: cf-subnet

  lb_net:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: lb-net

  lb_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: lb_net }
      cidr: 
        list_join: ['.', [ {get_param: network_prefix}, '0.0/24']] 
      dns_nameservers: [ {get_param: dns_host1}, {get_param: dns_host2} ]
      ip_version: 4
      name: lb-subnet

  docker_services_net:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: internal-net-docker-services

  docker_services_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: docker_services_net }
      cidr: 
        list_join: ['.', [ {get_param: network_prefix}, '5.0/24']] 
      dns_nameservers: [ {get_param: dns_host1}, {get_param: dns_host2} ]
      ip_version: 4
      name: docker-services-subnet

  logsearch_net:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: internal-net-logsearch

  logsearch_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: logsearch_net }
      cidr: 
        list_join: ['.', [ {get_param: network_prefix}, '7.0/24']] 
      dns_nameservers: [ {get_param: dns_host1}, {get_param: dns_host2} ]
      ip_version: 4
      name: logsearch-subnet

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: internet }
      name: router

  int-ext-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: internal_subnet }

  int-ext-docker-services-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: docker_services_subnet }

  int-ext-lb-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: lb_subnet }

  int-ext-logsearch-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: logsearch_subnet }

  bastion_keypair:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name: bastion-keypair

  bastion_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      name: bastion
      description: Bastion Security Groups
      rules:
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 22
          port_range_max: 22
        - protocol: icmp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 0
          port_range_max: 0

  cloudfoundry_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      name: cf
      description: Cloud Foundry Security groups
      rules:
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 80
          port_range_max: 80
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 443
          port_range_max: 443
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 4443
          port_range_max: 4443
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 4222
          port_range_max: 25777
        - protocol: icmp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 0
          port_range_max: 0
        - protocol: tcp
          port_range_min: 1
          port_range_max: 65535
          remote_mode: "remote_group_id"
        - protocol: udp
          port_range_min: 1
          port_range_max: 65535
          remote_mode: "remote_group_id"
        - protocol: icmp
          port_range_min: 0
          port_range_max: 0
          remote_mode: "remote_group_id"

  bastion_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: "internet"

  cloudfoundry_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: "internet"

  bastion_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: internal_net }
      fixed_ips:
        - subnet_id: { get_resource: internal_subnet }
      security_groups:
        - { get_resource: bastion_secgroup }

  bastion_server:
    type: OS::Nova::Server
    properties:
      name: bastion
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_resource: bastion_keypair }
      networks:
        - port: { get_resource: bastion_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: bastion_init }

  bastion_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: included_files }
      - config: { get_resource: run_scripts }

  included_files:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        manage_etc_hosts: "localhost"
        write_files:
        - path: /tmp/prepare.sh
          permissions: 0555
          content:
            str_replace:
              params:
                TB_VERSION: { get_param: traveling_bosh_admin_version }
                TCF_VERSION: { get_param: traveling_cf_admin_version }
              template: { get_file: https://raw.githubusercontent.com/UKCloud/cloudfoundry-on-openstack/master/files/prepare.sh }
        - path: /home/ubuntu/workspace/settings.yml
          permissions: 0666
          content:
            str_replace:
              params:
                OS_USER: { get_param: openstack_user }
                OS_PASSWORD: { get_param: openstack_password }
                OS_PROJECT: { get_param: openstack_project }
                OS_AUTH_URL: { get_param: openstack_auth_url }
                BOSH_SUBNET_ID: { get_attr: [internal_subnet,network_id] }
                BOSH_FIXED_IP: 192.168.2.200
              template: { get_file: https://raw.githubusercontent.com/UKCloud/cloudfoundry-on-openstack/master/files/settings.yml }
        - path: /tmp/patch/cloud.rb
          content: { get_file: https://raw.githubusercontent.com/UKCloud/cloudfoundry-on-openstack/master/files/patch/cloud.rb }

  stack_continue:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: stack_continue_handle }
      timeout: 240

  stack_continue_handle:
    type: OS::Heat::WaitConditionHandle

  run_scripts:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          params:
            CONTINUE_URL: { get_attr: [stack_continue_handle, curl_cli] }
          template: { get_file: files/run_scripts.sh }

  bastion_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: bastion_ip }
      port_id: { get_resource: bastion_port }

outputs:
  bastion_ip:
    description: Public IP of Bastion Host
    value:  { get_attr: [ bastion_ip, floating_ip_address ] }

  bastion_private_key:
    description: Bastion SSH Private Key
    value: { get_attr: [ bastion_keypair, private_key ]}
